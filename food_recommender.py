# -*- coding: utf-8 -*-
"""food_recommender

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19qv7YIMlsx0KPONAMwzleL-8BDUL-RjI
"""

from google.colab import files
uploaded = files.upload()  # 여기서 두 CSV 파일을 모두 선택

from google.colab import files
uploaded = files.upload()  # 여기서 두 CSV 파일을 모두 선택

import pandas as pd

# 파일 경로
file_path = "disease_nutrient_limits.csv"

try:
    # utf-8 인코딩으로 시도
    limit_df = pd.read_csv(file_path, encoding="utf-8")
    print("utf-8 인코딩으로 파일을 성공적으로 읽었습니다.")
    print(limit_df.head()) # 파일 내용을 일부 확인해볼 수 있습니다.
except UnicodeDecodeError:
    print("utf-8 인코딩으로도 오류가 발생했습니다.")
    print("파일의 실제 인코딩 방식을 정확히 확인해야 할 것 같습니다.")
except FileNotFoundError:
    print(f"오류: 파일 '{file_path}'을(를) 찾을 수 없습니다. 파일 경로를 다시 확인해주세요.")
except Exception as e:
    print(f"파일 읽기 중 예상치 못한 오류가 발생했습니다: {e}")

import pandas as pd

# 질병별 기준 파일은 cp949 (또는 euc-kr) 인코딩 사용
try:
    limit_df = pd.read_csv("disease_nutrient_limits.csv", encoding="utf-8")
    print("utf-8 인코딩으로 파일을 성공적으로 읽었습니다.")
except UnicodeDecodeError:
    print("utf-8 인코딩으로도 오류가 발생했습니다.")
    print("파일의 실제 인코딩 방식을 확인해 볼 필요가 있습니다.")

import pandas as pd

# CSV 파일 불러오기
file_path = "disease_nutrient_limits.csv"
limit_df = pd.read_csv(file_path)

# 예: 질병 선택
selected_disease = "당뇨병"

# 해당 질병의 기준값 가져오기
limit_row = limit_df.loc[limit_df["질병명"] == selected_disease].iloc[0]

# 기준값 출력 (선택적)
print("당류 기준:", limit_row["당류(g 이하)"])
print("나트륨 기준:", limit_row["나트륨(mg 이하)"])
print("지방 기준:", limit_row["지방(g 이하)"])

# 사용자 입력 (예시: 당뇨병)
selected_disease = "당뇨병"

# 질병 기준값 불러오기
limit_row = limit_df.loc[limit_df["질병명"] == selected_disease].iloc[0]

# 기준값 설정
sugar_limit  = limit_row["당류(g 이하)"]
sodium_limit = limit_row["나트륨(mg 이하)"]
fat_limit    = limit_row["지방(g 이하)"]

# 필터링
filtered_df = food_df.copy()

if not pd.isna(sugar_limit):
    filtered_df = filtered_df[filtered_df["당류(g)"] <= sugar_limit]
if not pd.isna(sodium_limit):
    filtered_df = filtered_df[filtered_df["나트륨(mg)"] <= sodium_limit]
if not pd.isna(fat_limit):
    filtered_df = filtered_df[filtered_df["지방(g)"] <= fat_limit]

# 결과 보기
filtered_df.head(10)

import pandas as pd

# limit_df, food_df 파일 경로 설정 (실제 파일 경로로 변경)
limit_file_path = "disease_nutrient_limits.csv"
food_file_path = "20250408_음식DB.csv"

# DataFrame 로드 (인코딩 오류 처리)
try:
    limit_df = pd.read_csv(limit_file_path, encoding='utf-8')
except UnicodeDecodeError:
    try:
        limit_df = pd.read_csv(limit_file_path, encoding='euc-kr')
    except UnicodeDecodeError:
        limit_df = pd.read_csv(limit_file_path, encoding='cp949')

try:
    food_df = pd.read_csv("20250408_음식DB.csv", encoding='utf-8')
except UnicodeDecodeError:
    try:
        food_df = pd.read_csv(food_file_path, encoding='euc-kr')
    except UnicodeDecodeError:
        food_df = pd.read_csv(food_file_path, encoding='cp949')

# 사용자로부터 질병명 입력 받기
selected_disease = input("추천받을 질병명을 입력하세요: ")

# 질병 기준값 가져오기 및 필터링
try:
    limit_row = limit_df.loc[limit_df["질병명"] == selected_disease]

    if limit_row.empty:
        print(f"'{selected_disease}'에 대한 기준값을 찾을 수 없습니다.")
    else:
        limit_row = limit_row.iloc[0]

        # 기준값 설정
        sugar_limit  = limit_row.get("당류(g 이하)", None)
        sodium_limit = limit_row.get("나트륨(mg 이하)", None)
        fat_limit    = limit_row.get("지방(g 이하)", None)

        # food_df 필터링
        filtered_df = food_df.copy()

        if sugar_limit is not None and not pd.isna(sugar_limit):
            filtered_df = filtered_df[filtered_df["당류(g)"] <= sugar_limit]
        if sodium_limit is not None and not pd.isna(sodium_limit):
            filtered_df = filtered_df[filtered_df["나트륨(mg)"] <= sodium_limit]
        if fat_limit is not None and not pd.isna(fat_limit):
            filtered_df = filtered_df[filtered_df["지방(g)"] <= fat_limit]

        # 추천 음식 출력
        if not filtered_df.empty:
            print(f"\n'{selected_disease}'에 대한 추천 음식:")
            for index, row in filtered_df.iterrows():
                print(f"- {row['식품명']}: 당류 {row['당류(g)']}g, 나트륨 {row['나트륨(mg)']}mg, 지방 {row['지방(g)']}g")
        else:
            print(f"\n'{selected_disease}'에 맞는 음식을 찾을 수 없습니다.")

except KeyError as e:
    print(f"KeyError: '{e}' 열을 찾을 수 없습니다. limit_df 또는 food_df의 열 이름을 확인하세요.")
except Exception as e:
    print(f"예상치 못한 오류가 발생했습니다: {e}")

